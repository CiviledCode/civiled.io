<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pwn on Civiled</title>
    <link>https://civiled.io/tags/pwn/</link>
    <description>Recent content in pwn on Civiled</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://civiled.io/tags/pwn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - Control Room</title>
      <link>https://civiled.io/writeups/htb-control-room/</link>
      <pubDate>Fri, 29 Nov 2024 00:00:00 +0000</pubDate>
      
      <guid>https://civiled.io/writeups/htb-control-room/</guid>
      <description>This article is hosted on -&amp;gt; Heptabase</description>
    </item>
    
    <item>
      <title>Radare2</title>
      <link>https://civiled.io/notes/radare2/</link>
      <pubDate>Sun, 22 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://civiled.io/notes/radare2/</guid>
      <description>Radare2 (r2) is an open-source framework for reverse engineering and analyzing binaries. It provides a suite of tools for disassembling, debugging, and analyzing code, with capabilities for both static and dynamic analysis. Radare2 is highly extensible and supports a wide range of architectures and file formats. Its primary features include:
 Disassembly and Analysis: R2 allows users to disassemble binaries, view control flow graphs, and analyze functions and symbols. Debugging: It includes an integrated debugger that supports debugging executables in real-time, with features for setting breakpoints, stepping through code, and inspecting memory and registers.</description>
    </item>
    
    <item>
      <title>Cyberspace 2024</title>
      <link>https://civiled.io/writeups/cyberspace/</link>
      <pubDate>Mon, 02 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://civiled.io/writeups/cyberspace/</guid>
      <description>Binary Manipulation I&amp;rsquo;m given a binary &amp;ldquo;chal&amp;rdquo; with the following protections:
 Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000)  Initially I held on to the assumption that shellcoding wouldn&amp;rsquo;t be possible due to NX being enabled. This would prove to be a problem later on. Luckily PIE was disabled so it&amp;rsquo;d be easy to setup debug scripts to break at static locations and I won&amp;rsquo;t have to rely on a memory leak if I want to begin with ROP.</description>
    </item>
    
    <item>
      <title>Heap Exploitation</title>
      <link>https://civiled.io/notes/heap/</link>
      <pubDate>Sun, 01 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://civiled.io/notes/heap/</guid>
      <description>The Heap is a data structure that exists to manage dynamic memory allocations. There exists multiple implementations of the heap.
Glibc Heap The glibc heap implementation works by exposing various functions that work off of two fundamental ideologies: allocating and freeing memory. When memory is needed, an allocate instruction is used to retrieve a location in memory that data can be stored at. When that data is no longer needed, the programmer can free it back to the heap to be reused for future allocations.</description>
    </item>
    
  </channel>
</rss>
